import { Manga, Chapter, Page } from "../types";

const API_BASE = "http://127.0.0.1:8000";

/** –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã */
function extractChapterNumber(name: string, fallback: string): string {
  if (!name) return fallback;
  const m = name.match(/(?:–ì–ª–∞–≤–∞|Chapter)\s*([0-9]+(?:\.[0-9]+)?)/i);
  return m?.[1] ?? fallback;
}

/** –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞–Ω–≥–∏ –ø–æ –∂–∞–Ω—Ä–∞–º */
function inferTypeFromGenres(genres: string[] = []): Manga["type"] {
  const g = genres.map((s) => s.toLowerCase());
  if (g.some((x) => x.includes("–º–∞–Ω—å—Ö—É–∞"))) return "Manhua";
  if (g.some((x) => x.includes("–º–∞–Ω—Ö–≤–∞"))) return "Manhwa";
  return "Manga";
}

/** –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ */
function mapStatus(additional?: any): Manga["status"] {
  const s: string = (additional?.status || "").toLowerCase();
  if (s.includes("–∑–∞–≤–µ—Ä—à")) return "–ó–∞–≤–µ—Ä—à–µ–Ω–æ";
  return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ";
}

/** –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü */
function normalizePages(pages: string[], chapterId: string): Page[] {
  return (pages || [])
    .filter((p) => !p.includes("/user_photo/")) // üö´ —É–±–∏—Ä–∞–µ–º –º—É—Å–æ—Ä
    .map((p, idx) => ({
      id: `${chapterId}-${idx}`,
      url: p.startsWith("http") ? p : undefined,
    }));
}

/** –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤—ã */
function normalizeChapter(ch: any, idx: number): Chapter {
  const title = ch?.name ?? `–ì–ª–∞–≤–∞ ${idx + 1}`;
  const id = ch?.chapter_id?.toString?.() ?? String(idx + 1);
  return {
    id,
    chapterNumber: extractChapterNumber(title, String(idx + 1)),
    title,
    date: new Date().toISOString(),
    views: 0,
    pages: normalizePages(ch?.pages || [], id),
    likes: 0,
  };
}

/** –í—ã–±–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±–ª–æ–∂–∫–∏ */
function pickCoverUrl(data: any): string {
  const cover = data?.cover_url ?? "";

  // –µ—Å–ª–∏ cover_url –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Üí –±–µ—Ä—ë–º –µ–≥–æ
  if (cover && !cover.includes("/user_photo/") && !cover.includes("s_56x56")) {
    return cover;
  }

  // –∏–Ω–∞—á–µ –∏—â–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å /media/catalog/publication/
  const firstChapter = Array.isArray(data?.chapters) ? data.chapters[0] : null;
  const firstPage = firstChapter?.pages?.find((p: string) =>
    p.includes("/media/catalog/publication/")
  );

  return firstPage || cover || "";
}

/** –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–Ω–≥–∏ */
function normalizeManga(data: any): Manga {
  const genres: string[] = Array.isArray(data?.genres) ? data.genres : [];
  const additional = data?.additional_info ?? {};
  return {
    id: data?.manga_id ?? (globalThis.crypto?.randomUUID?.() ?? `${Date.now()}`),
    title: data?.title ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
    type: inferTypeFromGenres(genres),
    year: Number(additional?.year ?? new Date().getFullYear()),
    rating: 0,
    userRatings: {},
    views: "0",
    cover: pickCoverUrl(data), // ‚úÖ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±–ª–æ–∂–∫–∞
    description: data?.description ?? "",
    chapters: Array.isArray(data?.chapters)
      ? data.chapters.map((ch: any, idx: number) => normalizeChapter(ch, idx))
      : [],
    genres,
    status: mapStatus(additional),
  };
}

/** –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–Ω–≥–µ */
export async function fetchMangaInfo(url: string): Promise<Manga> {
  const res = await fetch(`${API_BASE}/manga?url=${encodeURIComponent(url)}`);
  if (!res.ok) {
    const text = await res.text().catch(() => "");
    throw new Error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–Ω–≥–∏: ${res.status} ${res.statusText} ${text}`
    );
  }
  const raw = await res.json();
  return normalizeManga(raw); // ‚úÖ —É–∂–µ —Å Page[] –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±–ª–æ–∂–∫–æ–π
}
